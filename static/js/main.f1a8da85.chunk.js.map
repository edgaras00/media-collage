{"version":3,"sources":["utils.js","Context/CollageContext.js","Components/Options.js","Components/ItemTypes.js","Components/Box.js","Components/Cover.js","Components/SearchMedia.js","Components/TitlesContainer.js","Components/Container.js","App.js","index.js"],"names":["replaceSpaces","string","split","join","fillMissingData","array","numberOfItems","length","difference","push","slice","getRandomLetter","letters","Math","floor","random","getRandomYearOrGenre","genresAndYears","fetchMusicData","query","API","numItems","byAlbum","a","albumLetterQuery","genreYearQuery","fetch","response","json","data","albumData","results","albummatches","album","albums","albumObjects","map","item","image","artist","name","getRandomAnimeType","animeType","getRandomAnimeGenre","genreIds","CollageContext","React","createContext","CollageContextProvider","props","useState","numRows","setNumRows","numCols","setNumCols","displayTitles","setDisplayTitles","color","setColor","fontColor","setFontColor","firstGradientColor","setFirstGradientColor","secondGradientColor","setSecondGradientColor","boxMargin","setBoxMargin","fontFamily","setFontFamily","sort","setSort","randomList","setRandomList","shuffled","setShuffled","clear","setClear","searchMode","setSearchMode","boxType","setBoxType","backgroundMode","setBackgroundMode","borderRadius","setBorderRadius","gradientAngle","setGradientAngle","selectedId","setSelectedId","displaySearch","setDisplaySearch","generateRandomCollage","rows","cols","process","randomLetter","randomGenreOrYear","queryChoice","console","log","generateRandomAnimeCollage","randomPage","animePage","animeGenre","typeAnimeQuery","genreAnimeQuery","randomChoice","queryUrl","animeData","top","anime","animeObjects","image_url","title","generateRandomMovieCollage","moviePages","releaseYears","Array","from","x","i","randomYear","movieQuery","movieData","poster_path","generateRandomTvCollage","randomGenreId","tvGenreIds","tvQuery","tvData","generateRandomGameCollage","pages","gameQuery","then","gameData","background_image","error","Provider","value","getId","id","closeSearch","children","Options","generateRandom","useContext","displayTitle","className","type","min","max","step","onChange","event","target","Number","checked","prev","onClick","Box","dims","index","moveBox","handleClick","ref","useRef","useDrop","accept","ItemTypes","drop","current","dragIndex","hoverIndex","useDrag","drag","style","height","width","backgroundColor","margin","border","backgroundImage","backgroundSize","Cover","setBoxes","src","alt","prevBoxes","box","mediaName","SearchMedia","search","setSearch","searchData","setSearchData","useEffect","getData","ok","Error","searchItem","searchPlaceholder","coverComponents","key","isOpen","onRequestClose","ariaHideApp","role","aria-label","placeholder","onKeyDown","keyCode","TitlesContainer","titles","subArrays","start","end","listItems","flat","listStyle","overflow","fontSize","whiteSpace","padding","Container","items","itemArray","text","createBoxes","boxes","setTitles","setWidth","widthRef","useCallback","dragBox","hoveredBox","update","$splice","initialRenderResizeRef","prevBox","lastId","newItems","resizeMatrix","images","initialRenderShuffleRef","shuffledArr","concat","j","shuffle","getBoundingClientRect","body","matrix","createMatrix","row","rowIndex","column","colIndex","createMatrixTable","backgroundStyle","background","App","DndProvider","backend","Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1a8da85.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction createBoxes(rows, cols) {\n  // Function that creates box objects\n  const items = rows * cols;\n  const itemArray = [];\n  for (let i = 0; i < items; i++) {\n    itemArray.push({ id: i, text: i + 1, image: \"\", data: \"\" });\n  }\n  return itemArray;\n}\n\nfunction resizeMatrix(rows, cols, boxes) {\n  // Id of the last box in the collage / grid\n  const lastId = boxes.length - 1;\n  // Number of boxes in the collage / grid\n  const numberOfItems = rows * cols;\n  if (numberOfItems > boxes.length) {\n    // If (rows * columns) > boxes array length\n    // Add new box objects\n    const newItems = [];\n    for (let i = lastId + 1; i < numberOfItems; i++) {\n      newItems.push({ id: i, text: i + 1, image: \"\", data: \"\" });\n    }\n    const modifiedData = [...boxes, ...newItems];\n    return modifiedData;\n  }\n  if (numberOfItems < boxes.length) {\n    // If (rows * columns) < boxes array length\n    // Remove extra box objects\n    return boxes.slice(0, numberOfItems);\n  }\n}\n\nfunction shuffle(array) {\n  // Function that is used to shuffle the collage\n  const shuffledArr = [].concat(array);\n  for (let i = shuffledArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const x = shuffledArr[i];\n    shuffledArr[i] = shuffledArr[j];\n    shuffledArr[j] = x;\n  }\n  return shuffledArr;\n}\n\nfunction replaceSpaces(string) {\n  // Function that replaces spaces in search queries with \"+\"\n  // Can't have space characters in API queries\n  return string.split(\" \").join(\"+\");\n}\n\nfunction fillMissingData(array, numberOfItems) {\n  // Function that is used to fill up empty boxes with duplicate data\n  // It loops while there are still empty boxes\n  while (array.length < numberOfItems && array.length > 0) {\n    const difference = numberOfItems - array.length;\n    // If the difference is higher than 20\n    // Duplicate the whole array\n    if (difference > 20) {\n      array.push(...array);\n      // Just add the difference if difference < 20\n    } else {\n      array.push(...array.slice(0, difference));\n    }\n  }\n  return array;\n}\n\nconst createMatrix = (data, numRows, numCols) => {\n  const matrix = [];\n  let start = 0;\n  // Number of columns in the matrix\n  let end = numCols;\n  for (let i = 0; i < numRows; i++) {\n    matrix.push(data.slice(start, end));\n    start += numCols;\n    end += numCols;\n  }\n  return matrix;\n};\n\nconst createMatrixTable = (data, numRows, numCols) => {\n  const matrix = createMatrix(data, numRows, numCols);\n  const body = matrix.map((row, rowIndex) => {\n    return (\n      <tr key={rowIndex}>\n        {row.map((column, colIndex) => {\n          return <td key={colIndex}>{column}</td>;\n        })}\n      </tr>\n    );\n  });\n  return body;\n};\n\nconst getRandomLetter = () => {\n  const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n  return randomLetter;\n};\n\nconst getRandomYearOrGenre = () => {\n  const genresAndYears = [\n    \"pop\",\n    \"rap\",\n    \"rock\",\n    \"disco\",\n    \"electronic\",\n    \"80s\",\n    \"90s\",\n    \"2000s\",\n    \"2010s\",\n    \"2010\",\n    \"2011\",\n    \"2012\",\n    \"2013\",\n    \"2014\",\n    \"2015\",\n    \"2016\",\n    \"2017\",\n    \"2019\",\n    \"2020\",\n    \"2021\",\n    \"2022\",\n  ];\n  const randomGenreOrYear =\n    genresAndYears[Math.floor(Math.random() * genresAndYears.length)];\n  return randomGenreOrYear;\n};\n\nconst fetchMusicData = async (query, API, numItems, byAlbum) => {\n  const albumLetterQuery =\n    `http://ws.audioscrobbler.com/2.0/?method=album.search` +\n    `&album=${query}&api_key=${API}&format=json&limit=${numItems}`;\n\n  const genreYearQuery =\n    `http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums` +\n    `&tag=${query}&api_key=${API}&format=json&limit=${numItems}`;\n\n  const response = await fetch(byAlbum ? albumLetterQuery : genreYearQuery);\n  const data = await response.json();\n  const albumData = byAlbum\n    ? data.results.albummatches.album\n    : data.albums.album;\n\n  const albumObjects = albumData.map((item) => ({\n    image: item.image[2][\"#text\"],\n    data: `${byAlbum ? item.artist : item.artist.name} - ${item.name}`,\n  }));\n  return albumObjects;\n};\n\nconst getRandomAnimeType = () => {\n  const animeType = [\"movie\", \"tv\"];\n  const randomType = animeType[Math.floor(Math.random() * animeType.length)];\n  return randomType;\n};\n\nconst getRandomAnimeGenre = () => {\n  const genreIds = [\n    1,\n    2,\n    3,\n    4,\n    6,\n    7,\n    10,\n    11,\n    14,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    23,\n    27,\n    29,\n    30,\n    31,\n    32,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n  ];\n  const randomGenreId = genreIds[Math.floor(Math.random() * genreIds.length)];\n  return randomGenreId;\n};\n\nexport {\n  createBoxes,\n  resizeMatrix,\n  shuffle,\n  replaceSpaces,\n  fillMissingData,\n  createMatrix,\n  createMatrixTable,\n  getRandomLetter,\n  getRandomYearOrGenre,\n  fetchMusicData,\n  getRandomAnimeGenre,\n  getRandomAnimeType,\n};\n","import React, { useState } from \"react\";\nimport {\n  fillMissingData,\n  getRandomYearOrGenre,\n  getRandomLetter,\n  fetchMusicData,\n  getRandomAnimeType,\n  getRandomAnimeGenre,\n} from \"../utils\";\n\n// React Context that holds the app states that are accessible to multiple\n// components in the app\n\nconst CollageContext = React.createContext();\n\nconst CollageContextProvider = (props) => {\n  // Options context\n  const [numRows, setNumRows] = useState(3);\n  const [numCols, setNumCols] = useState(3);\n  const [displayTitles, setDisplayTitles] = useState(false);\n  const [color, setColor] = useState(\"#000\");\n  const [fontColor, setFontColor] = useState(\"#fff\");\n  const [firstGradientColor, setFirstGradientColor] = useState(\"#20BF55\");\n  const [secondGradientColor, setSecondGradientColor] = useState(\"#01BAEF\");\n  const [boxMargin, setBoxMargin] = useState(1);\n  const [fontFamily, setFontFamily] = useState(\"Courier\");\n  // Turn on/off the drag and sort option\n  const [sort, setSort] = useState(false);\n  // Array of randomly selected artwork images (Generate Random)\n  const [randomList, setRandomList] = useState([]);\n  // State for shuffling images\n  // State integer keeps getting incremented to rerender the new collage\n  const [shuffled, setShuffled] = useState(0);\n  // State to clear the collage / grid\n  const [clear, setClear] = useState(false);\n  // State for what media to search (music, movies, anime, tv, videogames)\n  const [searchMode, setSearchMode] = useState(\"music\");\n  // State for box / cell grid type (square | rectangle)\n  const [boxType, setBoxType] = useState(\"square\");\n  // State for background color mode (regular | gradient)\n  const [backgroundMode, setBackgroundMode] = useState(\"regular\");\n  // State for border radius\n  const [borderRadius, setBorderRadius] = useState(0);\n  // State for gradient angle\n  const [gradientAngle, setGradientAngle] = useState(20);\n\n  // Collage context\n  // State for the selected box id\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Display search modal (true/false)\n  const [displaySearch, setDisplaySearch] = useState(false);\n\n  // Options functions\n\n  const getId = (id) => {\n    // Function that sets selectedId as the clicked-on box id\n    // and opens the search modal\n    setSelectedId(id);\n    setDisplaySearch(true);\n  };\n\n  const closeSearch = () => {\n    // Function that closes the search modal\n    setDisplaySearch(false);\n  };\n\n  const generateRandomCollage = async (rows, cols) => {\n    // Function that generates a random music artwork collage\n    const API = process.env.REACT_APP_MUSIC_API;\n\n    // Pick a random letter or year/genre to search artwork by\n    const randomLetter = getRandomLetter();\n    const randomGenreOrYear = getRandomYearOrGenre();\n    // Number of  boxes to fill\n    const numItems = rows * cols;\n\n    // Randomly decide which random query to run (50 50 chance)\n    const queryChoice = Math.random();\n\n    try {\n      if (queryChoice < 0.5) {\n        const albumData = await fetchMusicData(\n          randomLetter,\n          API,\n          numItems,\n          true\n        );\n        setRandomList(albumData);\n        return;\n      }\n      const albumData = await fetchMusicData(\n        randomGenreOrYear,\n        API,\n        numItems,\n        false\n      );\n      setRandomList(albumData);\n      return;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomAnimeCollage = async () => {\n    // Function to fetch random anime data\n\n    try {\n      // Array of pages for the random API call\n      const animePage = [1, 2, 3, 4, 5];\n      // Select a random page from the array of pages\n      const randomPage =\n        animePage[Math.floor(Math.random() * animePage.length)];\n\n      const animeType = getRandomAnimeType();\n      const animeGenre = getRandomAnimeGenre();\n\n      // Anime query by anime type | Returns top movies/shows\n      const typeAnimeQuery = `https://api.jikan.moe/v3/top/anime/${randomPage}/${animeType}`;\n      // Anime query by genre | Returns by genres\n      const genreAnimeQuery = `https://api.jikan.moe/v3/genre/anime/${animeGenre}`;\n      // Randomly choose which query to use\n      const randomChoice = Math.random();\n\n      // Which API query\n      let queryUrl = typeAnimeQuery;\n      if (randomChoice < 0.5) {\n        queryUrl = genreAnimeQuery;\n      }\n\n      const response = await fetch(queryUrl);\n      const data = await response.json();\n\n      const animeData = randomChoice >= 0.5 ? data.top : data.anime;\n      const animeObjects = animeData.map((item) => {\n        return {\n          image: item.image_url,\n          data: item.title,\n        };\n      });\n      setRandomList(animeObjects);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomMovieCollage = async (rows, cols) => {\n    // Function fetch random movie data and generate a collage\n    try {\n      // Number of data objects needed\n      const numberOfItems = rows * cols;\n      const API = process.env.REACT_APP_MOVIE_API;\n      // Array of pages (API pagination)\n      const moviePages = [1, 2, 3];\n      // Create an array of movies released from 1990 - 2020\n      const releaseYears = Array.from(new Array(31), (x, i) => i + 1990);\n      // Select a random page, year and build the API query\n      const randomPage =\n        moviePages[Math.floor(Math.random() * moviePages.length)];\n      const randomYear =\n        releaseYears[Math.floor(Math.random() * releaseYears.length)];\n      const movieQuery =\n        `https://api.themoviedb.org/3/discover/movie?` +\n        `api_key=${API}&language=en-US&sort_by=popularity.desc` +\n        `&include_adult=false&include_video=false&page=${randomPage}` +\n        `&primary_release_year=${randomYear}`;\n      // Fetch the movie data\n      const response = await fetch(movieQuery);\n      const data = await response.json();\n      let movieData = data.results.map((item) => {\n        return {\n          image: `https://image.tmdb.org/t/p/w300${item.poster_path}`,\n          data: item.title,\n        };\n      });\n      if (numberOfItems > movieData.length) {\n        movieData = fillMissingData(movieData, numberOfItems);\n      }\n      setRandomList(movieData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomTvCollage = async (rows, cols) => {\n    try {\n      // Function that fetches random TV show data and creates a collage\n      const numberOfItems = rows * cols;\n      const API = process.env.REACT_APP_MOVIE_API;\n      // An array of some genre ids\n      const tvGenreIds = [16, 35, 80, 18, 9648, 53];\n      // Pick a random genre id and build API query\n      const randomGenreId =\n        tvGenreIds[Math.floor(Math.random() * tvGenreIds.length)];\n      const tvQuery =\n        `https://api.themoviedb.org/3/discover/tv?api_key=${API}` +\n        `&language=en-US&sort_by=popularity.desc&page=1` +\n        `&timezone=America%2FNew_York&with_genres=${randomGenreId}` +\n        `&include_null_first_air_dates=false`;\n      // Fetch the TV show data\n\n      const response = await fetch(tvQuery);\n      const data = await response.json();\n      let tvData = data.results.map((item) => {\n        return {\n          image: `https://image.tmdb.org/t/p/w300${item.poster_path}`,\n          data: item.name,\n        };\n      });\n      // If there are empty boxes / cells\n      // Fill with duplicate data\n      if (numberOfItems > tvData.length) {\n        tvData = fillMissingData(tvData, numberOfItems);\n      }\n      setRandomList(tvData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomGameCollage = async (rows, cols) => {\n    try {\n      // Function that fetches random videogame data and creates a collage\n      // Number of objects needed\n      const numberOfItems = rows * cols;\n      // Array of pages (API pagination)\n      const pages = [1, 2, 3, 4];\n      // Choose a random page and build a query\n      const randomPage = pages[Math.floor(Math.random() * pages.length)];\n      const API = process.env.REACT_APP_GAME_API;\n      const gameQuery = `https://api.rawg.io/api/games?page=${randomPage}&key=${API}`;\n      // Fetch the game data\n      fetch(gameQuery)\n        .then((response) => response.json())\n        .then((data) => {\n          let gameData = data.results.map((item) => {\n            return {\n              image: item.background_image,\n              data: item.name,\n            };\n          });\n          // Fill up with duplicate data if there are empty boxes\n          if (numberOfItems > gameData.length) {\n            gameData = fillMissingData(gameData, numberOfItems);\n          }\n          setRandomList(gameData);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <CollageContext.Provider\n      value={{\n        getId,\n        selectedId,\n        displaySearch,\n        numRows,\n        numCols,\n        setNumCols,\n        setNumRows,\n        color,\n        firstGradientColor,\n        secondGradientColor,\n        fontColor,\n        setColor,\n        setFontColor,\n        setFirstGradientColor,\n        setSecondGradientColor,\n        boxMargin,\n        setBoxMargin,\n        displayTitles,\n        setDisplayTitles,\n        fontFamily,\n        setFontFamily,\n        sort,\n        setSort,\n        randomList,\n        generateRandomCollage,\n        generateRandomAnimeCollage,\n        generateRandomMovieCollage,\n        generateRandomTvCollage,\n        generateRandomGameCollage,\n        shuffled,\n        setShuffled,\n        clear,\n        setClear,\n        closeSearch,\n        searchMode,\n        setSearchMode,\n        boxType,\n        setBoxType,\n        backgroundMode,\n        setBackgroundMode,\n        borderRadius,\n        setBorderRadius,\n        gradientAngle,\n        setGradientAngle,\n      }}\n    >\n      {props.children}\n    </CollageContext.Provider>\n  );\n};\n\nexport { CollageContextProvider, CollageContext };\n","import React, { useContext } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport \"../styles/options.css\";\n\nconst Options = () => {\n  // Functional Options component\n  // Allows for collage/grid customization\n\n  // React Context for the customization options\n  const {\n    numRows,\n    numCols,\n    setNumRows,\n    setNumCols,\n    color,\n    firstGradientColor,\n    secondGradientColor,\n    setFirstGradientColor,\n    setSecondGradientColor,\n    fontColor,\n    setColor,\n    setFontColor,\n    boxMargin,\n    setBoxMargin,\n    setDisplayTitles,\n    displayTitle,\n    fontFamily,\n    setFontFamily,\n    sort,\n    setSort,\n    generateRandomCollage,\n    generateRandomAnimeCollage,\n    generateRandomMovieCollage,\n    generateRandomTvCollage,\n    generateRandomGameCollage,\n    setShuffled,\n    setClear,\n    searchMode,\n    setSearchMode,\n    boxType,\n    setBoxType,\n    backgroundMode,\n    setBackgroundMode,\n    borderRadius,\n    setBorderRadius,\n    gradientAngle,\n    setGradientAngle,\n  } = useContext(CollageContext);\n\n  // Generate random collage based on the selected mode\n  let generateRandom;\n  switch (searchMode) {\n    case \"music\":\n      generateRandom = generateRandomCollage;\n      break;\n    case \"movies\":\n      generateRandom = generateRandomMovieCollage;\n      break;\n    case \"anime\":\n      generateRandom = generateRandomAnimeCollage;\n      break;\n    case \"tv\":\n      generateRandom = generateRandomTvCollage;\n      break;\n    case \"videogames\":\n      generateRandom = generateRandomGameCollage;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"options-container\">\n      <div className=\"options\">\n        {/* Number of rows slider */}\n        <label>\n          Rows:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            name=\"numRows\"\n            value={numRows}\n            onChange={(event) => setNumRows(event.target.value * 1)}\n          />{\" \"}\n          {numRows}\n        </label>\n        <br />\n        <br />\n        {/* Number of columns slider */}\n        <label>\n          Columns:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            value={numCols}\n            onChange={(event) => setNumCols(event.target.value * 1)}\n          />\n          {numCols}\n        </label>\n        <br />\n        <br />\n        {/* Margin slider (number of pixels) */}\n        <label>\n          Margin (pixels):\n          <input\n            type=\"range\"\n            name=\"boxMargin\"\n            min=\"0\"\n            max=\"15\"\n            step=\"1\"\n            value={boxMargin}\n            onChange={(event) => setBoxMargin(Number(event.target.value))}\n          />\n          {boxMargin}\n        </label>\n        <br />\n        <br />\n        <label>\n          {/* Border radius slider */}\n          Border Radius:\n          <input\n            type=\"range\"\n            name=\"borderRadius\"\n            min=\"0\"\n            max=\"50\"\n            step=\"1\"\n            value={borderRadius}\n            onChange={(event) => setBorderRadius(event.target.value * 1)}\n          />\n        </label>\n        <br />\n        <br />\n        {/* Radio button to select grid cell's shape (square) */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"boxType\"\n            value=\"square\"\n            checked={boxType === \"square\"}\n            onChange={(event) => setBoxType(event.target.value)}\n          />\n          Square\n        </label>\n        <br />\n        {/* Radio button for grid cell's shape (rectangle) */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"boxType\"\n            value=\"rectangle\"\n            checked={boxType === \"rectangle\"}\n            onChange={(event) => setBoxType(event.target.value)}\n          />\n          Rectangle\n        </label>\n        <br />\n        <br />\n        {/* Select input for search mode. What kind of media to look for. */}\n        <select\n          name=\"searchMode\"\n          onChange={(event) => setSearchMode(event.target.value)}\n        >\n          <option value=\"music\">Music</option>\n          <option value=\"movies\">Movies</option>\n          <option value=\"tv\">TV Shows</option>\n          <option value=\"anime\">Anime</option>\n          <option value=\"videogames\">Video Games</option>\n        </select>\n        <br />\n        <br />\n        {/* Radio button for regular background color */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"backgroundMode\"\n            value=\"regular\"\n            checked={backgroundMode === \"regular\"}\n            onChange={(event) => setBackgroundMode(event.target.value)}\n          />\n          Regular\n        </label>\n        <br />\n        {/* Radio button for gradient background color */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"backgroundMode\"\n            value=\"gradient\"\n            checked={backgroundMode === \"gradient\"}\n            onChange={(event) => setBackgroundMode(event.target.value)}\n          />\n          Gradient\n        </label>\n        <br />\n        <br />\n        {/* Color options based on selected color mode */}\n        {backgroundMode === \"regular\" ? (\n          <label>\n            <span>Background Color: </span>\n            <input\n              type=\"text\"\n              name=\"color\"\n              value={color}\n              onChange={(event) => setColor(event.target.value)}\n            />\n          </label>\n        ) : (\n          <div>\n            <label>\n              <span>Linear Gradient: </span>\n              <div>\n                <input\n                  type=\"text\"\n                  name=\"colorOne\"\n                  value={firstGradientColor}\n                  onChange={(event) =>\n                    setFirstGradientColor(event.target.value)\n                  }\n                />\n                <input\n                  type=\"text\"\n                  name=\"colorTwo\"\n                  value={secondGradientColor}\n                  onChange={(event) =>\n                    setSecondGradientColor(event.target.value)\n                  }\n                />\n              </div>\n            </label>\n            <label>\n              Angle:\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={gradientAngle}\n                onChange={(event) => setGradientAngle(event.target.value * 1)}\n              />\n            </label>\n          </div>\n        )}\n        <br />\n        <br />\n        {/* Select font family*/}\n        <label>\n          <span>Font: </span>\n          <select\n            value={fontFamily}\n            onChange={(event) => setFontFamily(event.target.value)}\n          >\n            <option value=\"Courier\">Courier</option>\n            <option value=\"Helvetica\">Helvetica</option>\n            <option value=\"Verdana\">Verdana</option>\n            <option value=\"Roboto\">Roboto</option>\n          </select>\n        </label>\n        <br />\n        {/* Select font color */}\n        <label>\n          <span>Font Color: </span>\n          <input\n            type=\"text\"\n            name=\"fontColor\"\n            value={fontColor}\n            onChange={(event) => setFontColor(event.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        {/* Radio button for drag and sort option */}\n        {/* Pushes neighboring cells to the side */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            value={sort}\n            checked={sort}\n            onChange={() => setSort(true)}\n          />\n          Drag and Sort\n        </label>\n        <br />\n        {/* Radio button for drag and swap option */}\n        {/* Swaps grid cell positions */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            value={sort}\n            checked={!sort}\n            onChange={() => setSort(false)}\n          />\n          Drag and Swap\n        </label>\n        <br />\n        <br />\n        {/* Checkbox to show or hide titles */}\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"displayTitle\"\n            value={displayTitle}\n            checked={displayTitle}\n            onChange={() => setDisplayTitles((prev) => !prev)}\n          />\n          Show Titles\n        </label>\n        <br />\n        <br />\n        <br />\n        {/* Button that generates a random media collage */}\n        <button\n          onClick={() => generateRandom(numRows, numCols)}\n          className=\"menu-button\"\n        >\n          Generate Random\n        </button>\n        <br />\n        <br />\n        {/* Button that shuffles the images */}\n        <button\n          onClick={() => setShuffled((prev) => prev + 1)}\n          className=\"menu-button\"\n        >\n          Shuffle Images\n        </button>\n        <br />\n        <br />\n        {/* Button that clears the collage */}\n        <button\n          onClick={() => setClear((prev) => !prev)}\n          className=\"menu-button\"\n        >\n          Clear Collage\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Options;\n","// Type object required for the DnD library\nexport default {\n  BOX: \"box\",\n};\n","import React, { useRef } from \"react\";\nimport { useDrop, useDrag } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport \"../styles/box.css\";\n\nconst Box = ({\n  id,\n  index,\n  moveBox,\n  image,\n  boxMargin,\n  handleClick,\n  numCols,\n  boxType,\n  borderRadius,\n}) => {\n  const ref = useRef(null);\n\n  const [, drop] = useDrop({\n    /* \n      The useDrop hook provides a way to wire in the component into the DnD \n      system as a drop target \n    */\n    // The \"type\" to accept as a droppable object\n    accept: ItemTypes.BOX,\n    drop(item) {\n      // Function that is called when a compatible item is dropped on target\n\n      // If box ref is null exit the function\n      if (!ref.current) {\n        return;\n      }\n\n      // Don't replace items with themselves\n      // Exit if dragged box is hovering over its own index\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      moveBox(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    },\n  });\n\n  const [, drag] = useDrag({\n    /*\n      useDrag hook provides a way to wire in the component into the DnD\n      system as a drag source\n    */\n\n    // type: used by the \"accept specification\" of drop targets\n    item: { type: ItemTypes.BOX, id, index },\n  });\n\n  drag(drop(ref));\n\n  // Box dimensions\n  // Decrease box size as the number of columns increases\n  // So that the grids fits the screen size\n  let dims;\n  if (numCols <= 5) {\n    dims = 160;\n  } else if (numCols === 6) {\n    dims = 140;\n  } else if (numCols === 7) {\n    dims = 130;\n  } else if (numCols === 8) {\n    dims = 110;\n  } else if (numCols === 9) {\n    dims = 100;\n  } else if (numCols === 10) {\n    dims = 90;\n  }\n\n  // Box style\n  const style = {\n    // Box height based on dimensions\n    height: boxType === \"square\" ? dims + \"px\" : dims / 0.7 + \"px\",\n    width: dims + \"px\",\n    backgroundColor: \"lightgrey\",\n    margin: boxMargin,\n    border: \"none\",\n  };\n  return (\n    <div\n      className=\"box\"\n      style={{\n        ...style,\n        backgroundImage: `url(${image})`,\n        backgroundSize: `${dims}px ${\n          boxType === \"square\" ? dims : dims / 0.7\n        }px`,\n        borderRadius: `${borderRadius}%`,\n      }}\n      ref={ref}\n      onClick={() => handleClick(id)}\n    ></div>\n  );\n};\nexport default Box;\n","import React, { useContext } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport \"../styles/cover.css\";\n\nconst Cover = ({ image, artist, name, setBoxes }) => {\n  // Functional cover component\n  // This component is used in the SearchmMedia modal component\n  // Showed as a search result and contains info such as artist/title\n\n  // const { selectedId, setBoxes, closeSearch } = useContext(CollageContext);\n  const { selectedId, closeSearch, searchMode } = useContext(CollageContext);\n\n  const handleClick = () => {\n    console.log(artist, name);\n    setBoxes((prevBoxes) => {\n      const modified = prevBoxes.map((box) => {\n        let mediaName = searchMode === \"music\" ? `${artist} - ${name}` : name;\n        if (box.id === selectedId) {\n          return {\n            ...box,\n            image,\n            data: mediaName,\n          };\n        }\n        return box;\n      });\n      return modified;\n    });\n    closeSearch();\n  };\n\n  return (\n    <div>\n      <img\n        className=\"search-cover\"\n        src={image}\n        alt={`${artist} - ${name}`}\n        onClick={handleClick}\n      />\n    </div>\n  );\n};\n\nexport default Cover;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport Modal from \"react-modal\";\nimport Cover from \"./Cover\";\nimport { replaceSpaces } from \"../utils\";\nimport \"../styles/searchMedia.css\";\n\nconst SearchMedia = ({ setBoxes }) => {\n  // A functional modal component that lets the user search for media images\n\n  // Component state\n  // Controlled search input value\n  const [search, setSearch] = useState(\"\");\n\n  // Array of media image objects that are presented on the search modal\n  // for the user to select the image to add it to the collage\n  const [searchData, setSearchData] = useState([]);\n\n  const { displaySearch, closeSearch, searchMode } = useContext(CollageContext);\n\n  useEffect(() => {\n    if (!displaySearch) {\n      setSearchData([]);\n      setSearch(\"\");\n    }\n  }, [displaySearch]);\n\n  // Build a different query for a different search mode\n  let API, query;\n  switch (searchMode) {\n    case \"music\":\n      API = process.env.REACT_APP_MUSIC_API;\n      query =\n        `http://ws.audioscrobbler.com/2.0/?method=album.search&` +\n        `album=${replaceSpaces(search)}` +\n        `&api_key=${API}&format=json&limit=20`;\n      break;\n\n    case \"movies\":\n      API = process.env.REACT_APP_MOVIE_API;\n      query =\n        `https://api.themoviedb.org/3/search/movie?` +\n        `api_key=${API}&language=en-US&query=${replaceSpaces(search)}` +\n        `&page=1&include_adult=false`;\n      break;\n\n    case \"tv\":\n      API = process.env.REACT_APP_MOVIE_API;\n      query =\n        `https://api.themoviedb.org/3/search/tv?api_key=${API}` +\n        `&language=en-US&page=1&query=${replaceSpaces(search)}` +\n        `&include_adult=false`;\n      break;\n    case \"anime\":\n      query =\n        `https://api.jikan.moe/v3/search/anime?` +\n        `q=${replaceSpaces(search)}&limit=20`;\n      break;\n    case \"videogames\":\n      API = process.env.REACT_APP_GAME_API;\n      query = `https://api.rawg.io/api/games?search=${replaceSpaces(\n        search\n      )}&key=${API}`;\n      break;\n    default:\n  }\n\n  const getData = async () => {\n    try {\n      const response = await fetch(query);\n      if (!response.ok) {\n        // response.status(404);\n        throw new Error(\"404: Media not found\");\n      }\n      const data = await response.json();\n      if (searchMode === \"music\") {\n        setSearchData(data.results.albummatches.album);\n      } else {\n        setSearchData(data.results);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    // Function that submits user's query with Enter/Return key\n    if (event.keyCode === 13) {\n      getData();\n    }\n  };\n\n  console.log(searchData);\n\n  // Create coverComponents that are presented on the search modal\n  const coverComponents = searchData.map((item, index) => {\n    // Different API data is differently structured\n    let image, artist, name;\n    switch (searchMode) {\n      case \"music\":\n        image = item.image[2][\"#text\"];\n        artist = item.artist;\n        name = item.name;\n        break;\n      case \"movies\":\n        image = `https://image.tmdb.org/t/p/w300${item.poster_path}`;\n        name = item.title;\n        break;\n      case \"tv\":\n        image = `https://image.tmdb.org/t/p/w300${item.poster_path}`;\n        name = item.name;\n        break;\n      case \"anime\":\n        image = item.image_url;\n        name = item.title;\n        break;\n      case \"videogames\":\n        image = item.background_image;\n        name = item.name;\n        break;\n      default:\n    }\n    return (\n      <Cover\n        image={image}\n        name={name}\n        artist={artist}\n        key={index + name}\n        setBoxes={setBoxes}\n      />\n    );\n  });\n\n  // Placeholder for the search input and modal header\n  // Lets the user know what to search\n  let searchItem;\n  let searchPlaceholder;\n  switch (searchMode) {\n    case \"music\":\n      searchItem = \"an album\";\n      searchPlaceholder = \"Artist/album name\";\n      break;\n    case \"movies\":\n      searchItem = \"a movie\";\n      searchPlaceholder = \"Movie title\";\n      break;\n    case \"videogames\":\n      searchItem = \"a video game\";\n      searchPlaceholder = \"Video game title\";\n      break;\n    case \"tv\":\n      searchItem = \"a TV show\";\n      searchPlaceholder = \"TV show title\";\n      break;\n    case \"anime\":\n      searchItem = \"an anime\";\n      searchPlaceholder = \"Anime title\";\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Modal\n      isOpen={displaySearch}\n      className=\"modal\"\n      onRequestClose={closeSearch}\n      ariaHideApp={false}\n    >\n      <div className=\"search-box\">\n        <div className=\"search-header\">\n          <h2>\n            <span role=\"img\" aria-label=\"search icon\">\n              &#128269;\n            </span>{\" \"}\n            Search for {searchItem}\n          </h2>\n          <button className=\"close\" onClick={closeSearch}>\n            X\n          </button>\n        </div>\n        <div className=\"searchbar\">\n          <input\n            type=\"search\"\n            name=\"search\"\n            value={search}\n            placeholder={searchPlaceholder}\n            onKeyDown={handleKeyDown}\n            onChange={(event) => setSearch(event.target.value)}\n          />\n          <div className=\"search-results\">{coverComponents}</div>\n        </div>\n        <div className=\"search-button\">\n          <button onClick={getData}>Search</button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default SearchMedia;\n","import React from \"react\";\n\nconst TitlesContainer = ({\n  titles,\n  numRows,\n  numCols,\n  fontFamily,\n  fontColor,\n  width,\n}) => {\n  // Functional component that holds the media titles\n\n  // Separate the titles into separate groups based on rows / columns\n  // Each title group will be separated by a space\n  const subArrays = [];\n  let start = 0;\n  let end = numCols;\n  for (let i = 0; i < numRows; i++) {\n    subArrays.push([...titles.slice(start, end), <br />]);\n    start += numCols;\n    end += numCols;\n  }\n  // Create list <li> elements\n  const titleArray = subArrays.flat();\n  const listItems = titleArray.map((title, index) => {\n    if (title !== <br />) {\n      title = <li key={index}>{title}</li>;\n    }\n    return title;\n  });\n\n  return (\n    <ul\n      style={{\n        listStyle: \"none\",\n        fontFamily,\n        color: fontColor,\n        width: \"100%\",\n        overflow: \"auto\",\n        // reduce font size with increasing width\n        fontSize: `${800 / width}rem`,\n        whiteSpace: \"nowrap\",\n        padding: \"0 4%\",\n      }}\n    >\n      {listItems}\n    </ul>\n  );\n};\n\nexport default TitlesContainer;\n","import React, {\n  useState,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n} from \"react\";\nimport update from \"immutability-helper\";\nimport Box from \"./Box\";\nimport SearchMedia from \"./SearchMedia\";\nimport TitlesContainer from \"./TitlesContainer\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport {\n  resizeMatrix,\n  createBoxes,\n  shuffle,\n  createMatrixTable,\n} from \"../utils\";\nimport \"../styles/container.css\";\n\nconst Container = () => {\n  // Functional Container component\n\n  const {\n    getId,\n    numRows,\n    numCols,\n    color,\n    firstGradientColor,\n    secondGradientColor,\n    fontColor,\n    boxMargin,\n    displayTitles,\n    fontFamily,\n    sort,\n    randomList,\n    shuffled,\n    clear,\n    searchMode,\n    backgroundMode,\n    boxType,\n    borderRadius,\n    gradientAngle,\n  } = useContext(CollageContext);\n\n  const [boxes, setBoxes] = useState(createBoxes(numRows, numCols));\n\n  // An array of media titles (strings)\n  const [titles, setTitles] = useState([]);\n  //\n  const [width, setWidth] = useState(null);\n  const widthRef = useRef(null);\n\n  const moveBox = useCallback(\n    (dragIndex, hoverIndex) => {\n      /* \n        Uses useCallback hook so that the function is not recreated every\n        time the component renders \n        Only when the 'boxes' and 'sort' values change \n      */\n\n      // Selected box that is being dragged\n      const dragBox = boxes[dragIndex];\n      // Position / index of the box that is being hovered on\n      const hoveredBox = boxes[hoverIndex];\n      if (sort) {\n        // Push the neighboring boxes to the side if \"sort\" is selected\n        setBoxes((prev) =>\n          update(prev, {\n            // Remove from dragIndex and add to hoverIndex without removing box\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragBox],\n            ],\n          })\n        );\n      } else {\n        // Swap the drag box with drop box if \"swap\" is selected\n\n        setBoxes((prev) =>\n          update(prev, {\n            $splice: [\n              [dragIndex, 1, hoveredBox],\n              [hoverIndex, 1, dragBox],\n            ],\n          })\n        );\n      }\n    },\n    [boxes, sort]\n  );\n\n  // Make sure it doesn't run on the first render\n  const initialRenderResizeRef = useRef(true);\n  useEffect(() => {\n    if (initialRenderResizeRef.current) {\n      initialRenderResizeRef.current = false;\n    } else {\n      // Resize the grid by adding / removing boxes based on # rows/columns\n      setBoxes((prevBox) => resizeMatrix(numRows, numCols, prevBox));\n    }\n  }, [numRows, numCols]);\n\n  useEffect(() => {\n    // Generate a random collage from the values in the randomList\n    // randomList array is populated with media objects when user\n    // chooses to generate a random collage\n    setBoxes((prevBox) => {\n      //  Get the artwork image\n      const images = randomList.map((item) => item.image);\n      //  Get the media data\n      const data = randomList.map((item) => item.data);\n      const randomCollage = prevBox.map((item, index) => {\n        return {\n          ...item,\n          image: images[index],\n          data: data[index],\n        };\n      });\n      return randomCollage;\n    });\n  }, [randomList]);\n\n  useEffect(() => {\n    // Populate the title state array with media titles\n    let albumData = boxes.map((item) => item.data);\n    setTitles(albumData);\n  }, [boxes]);\n\n  const initialRenderShuffleRef = useRef(true);\n  useEffect(() => {\n    // Don't shuffle on initial render\n    if (initialRenderShuffleRef.current) {\n      initialRenderShuffleRef.current = false;\n    } else {\n      setBoxes((prevBox) => shuffle(prevBox));\n    }\n  }, [shuffled]);\n\n  useEffect(() => {\n    // Clear collage is user chooses the \"Clear Collage\" option\n    setBoxes((prevBox) => {\n      const modified = prevBox.map((item) => {\n        return {\n          ...item,\n          image: \"\",\n          data: \"\",\n        };\n      });\n      return modified;\n    });\n  }, [clear]);\n\n  useEffect(() => {\n    // Check the grid width based on the number of columns\n    // Necessary to choose a proper font size for media titles\n    if (displayTitles) {\n      setWidth(widthRef.current.getBoundingClientRect().width);\n    }\n  }, [numCols, displayTitles]);\n\n  // Create collage box components\n  const boxComponents = boxes.map((box, index) => {\n    return (\n      <Box\n        index={index}\n        key={box.id}\n        id={box.id}\n        text={box.text}\n        image={box.image}\n        moveBox={moveBox}\n        handleClick={getId}\n        boxMargin={boxMargin}\n        numCols={numCols}\n        boxType={boxType}\n        borderRadius={borderRadius}\n      />\n    );\n  });\n\n  // Create a table body\n  const body = createMatrixTable(boxComponents, numRows, numCols);\n\n  // Choose background style: regular or linear gradient\n  const backgroundStyle =\n    backgroundMode === \"regular\"\n      ? { backgroundColor: color }\n      : {\n          background: `linear-gradient(${gradientAngle}deg, ${firstGradientColor}, ${secondGradientColor})`,\n        };\n\n  return (\n    <div className=\"container-wrapper\">\n      <SearchMedia setBoxes={setBoxes} />\n      <div className=\"collage\">\n        <table ref={widthRef} style={backgroundStyle}>\n          <tbody>{body}</tbody>\n          <tfoot>\n            <tr>\n              <td>\n                {displayTitles ? (\n                  <TitlesContainer\n                    titles={titles}\n                    numCols={numCols}\n                    numRows={numRows}\n                    fontFamily={fontFamily}\n                    fontColor={fontColor}\n                    width={width}\n                    searchMode={searchMode}\n                  />\n                ) : null}\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport Options from \"./Components/Options\";\nimport Container from \"./Components/Container\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport \"./styles/app.css\";\n\nfunction App() {\n  return (\n    <DndProvider backend={Backend}>\n      <div className=\"app-container\">\n        <Options />\n        <Container />\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {CollageContextProvider} from './Context/CollageContext';\nimport './styles/index.css';\n\nReactDOM.render(\n  <CollageContextProvider>\n    <App />\n  </CollageContextProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}