{"version":3,"sources":["Context/CollageContext.js","Components/Options.js","Components/ItemTypes.js","Components/Box.js","Components/Cover.js","utils.js","Components/SearchMedia.js","Components/TitlesContainer.js","Components/Container.js","App.js","index.js"],"names":["CollageContext","React","createContext","CollageContextProvider","props","useState","numRows","setNumRows","numCols","setNumCols","displayTitles","setDisplayTitles","color","setColor","fontColor","setFontColor","firstGradientColor","setFirstGradientColor","secondGradientColor","setSecondGradientColor","boxMargin","setBoxMargin","fontFamily","setFontFamily","sort","setSort","randomList","setRandomList","shuffled","setShuffled","clear","setClear","searchMode","setSearchMode","boxType","setBoxType","backgroundMode","setBackgroundMode","borderRadius","setBorderRadius","gradientAngle","setGradientAngle","selectedId","setSelectedId","displaySearch","setDisplaySearch","generateRandomCollage","rows","cols","a","numItems","fetch","response","json","musicData","generateRandomAnimeCollage","animeData","console","log","generateRandomMovieCollage","numberOfItems","movieData","generateRandomTvCollage","tvData","generateRandomGameCollage","gameData","Provider","value","getId","id","closeSearch","children","Options","generateRandom","useContext","displayTitle","className","type","min","max","step","name","onChange","event","target","Number","checked","prev","onClick","Box","dims","index","moveBox","image","handleClick","ref","useRef","useDrop","accept","ItemTypes","drop","item","current","dragIndex","hoverIndex","useDrag","drag","style","height","width","backgroundColor","margin","border","backgroundImage","backgroundSize","Cover","artist","setBoxes","src","alt","prevBoxes","map","box","mediaName","data","replaceSpaces","string","split","join","SearchMedia","query","search","setSearch","searchData","setSearchData","useEffect","searchItem","searchPlaceholder","getData","ok","Error","coverComponents","poster_path","title","image_url","background_image","key","isOpen","onRequestClose","ariaHideApp","role","aria-label","placeholder","onKeyDown","keyCode","TitlesContainer","titles","subArrays","start","end","i","push","slice","listItems","flat","listStyle","overflow","fontSize","whiteSpace","padding","Container","items","itemArray","text","createBoxes","boxes","setTitles","setWidth","widthRef","useCallback","dragBox","hoveredBox","update","$splice","initialRenderResizeRef","prevBox","lastId","length","newItems","resizeMatrix","images","albumData","initialRenderShuffleRef","array","shuffledArr","concat","j","Math","floor","random","x","shuffle","getBoundingClientRect","body","matrix","createMatrix","row","rowIndex","column","colIndex","createMatrixTable","backgroundStyle","background","App","DndProvider","backend","Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a7ec292.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// React Context that holds the app states that are accessible to multiple\n// components in the app\n\nconst CollageContext = React.createContext();\n\nconst CollageContextProvider = (props) => {\n  // Options context\n  const [numRows, setNumRows] = useState(3);\n  const [numCols, setNumCols] = useState(3);\n  const [displayTitles, setDisplayTitles] = useState(false);\n  const [color, setColor] = useState(\"#000\");\n  const [fontColor, setFontColor] = useState(\"#fff\");\n  const [firstGradientColor, setFirstGradientColor] = useState(\"#20BF55\");\n  const [secondGradientColor, setSecondGradientColor] = useState(\"#01BAEF\");\n  const [boxMargin, setBoxMargin] = useState(1);\n  const [fontFamily, setFontFamily] = useState(\"Courier\");\n  // Turn on/off the drag and sort option\n  const [sort, setSort] = useState(false);\n  // Array of randomly selected artwork images (Generate Random)\n  const [randomList, setRandomList] = useState([]);\n  // State for shuffling images\n  // State integer keeps getting incremented to rerender the new collage\n  const [shuffled, setShuffled] = useState(0);\n  // State to clear the collage / grid\n  const [clear, setClear] = useState(false);\n  // State for what media to search (music, movies, anime, tv, videogames)\n  const [searchMode, setSearchMode] = useState(\"music\");\n  // State for box / cell grid type (square | rectangle)\n  const [boxType, setBoxType] = useState(\"square\");\n  // State for background color mode (regular | gradient)\n  const [backgroundMode, setBackgroundMode] = useState(\"regular\");\n  // State for border radius\n  const [borderRadius, setBorderRadius] = useState(0);\n  // State for gradient angle\n  const [gradientAngle, setGradientAngle] = useState(20);\n\n  // Collage context\n  // State for the selected box id\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Display search modal (true/false)\n  const [displaySearch, setDisplaySearch] = useState(false);\n\n  // Options functions\n\n  const getId = (id) => {\n    // Function that sets selectedId as the clicked-on box id\n    // and opens the search modal\n    setSelectedId(id);\n    setDisplaySearch(true);\n  };\n\n  const closeSearch = () => {\n    // Function that closes the search modal\n    setDisplaySearch(false);\n  };\n\n  const generateRandomCollage = async (rows, cols) => {\n    // Function that generates a random music artwork collage\n    const numItems = rows * cols;\n    const response = await fetch(\n      `http://localhost:5000/api/random/music?items=${numItems}`\n    );\n    const musicData = await response.json();\n    setRandomList(musicData);\n  };\n\n  const generateRandomAnimeCollage = async () => {\n    // Function to fetch random anime data\n\n    try {\n      const response = await fetch(`http://localhost:5000/api/random/anime`);\n      const animeData = await response.json();\n      setRandomList(animeData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomMovieCollage = async (rows, cols) => {\n    // Function fetch random movie data and generate a collage\n    try {\n      // Number of data objects needed\n      const numberOfItems = rows * cols;\n      console.log(numberOfItems);\n      const response = await fetch(\n        `http://localhost:5000/api/random/movies?items=${numberOfItems}`\n      );\n      const movieData = await response.json();\n      console.log(movieData);\n      setRandomList(movieData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomTvCollage = async (rows, cols) => {\n    try {\n      // Function that fetches random TV show data and creates a collage\n      const numberOfItems = rows * cols;\n      const response = await fetch(\n        `http://localhost:5000/api/random/tv?q=${numberOfItems}`\n      );\n      const tvData = await response.json();\n      setRandomList(tvData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const generateRandomGameCollage = async (rows, cols) => {\n    try {\n      // Function that fetches random videogame data and creates a collage\n      // Number of objects needed\n      const numberOfItems = rows * cols;\n      const response = await fetch(\n        `http://localhost:5000/api/random/games?items=${numberOfItems}`\n      );\n      const gameData = await response.json();\n      setRandomList(gameData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <CollageContext.Provider\n      value={{\n        getId,\n        selectedId,\n        displaySearch,\n        numRows,\n        numCols,\n        setNumCols,\n        setNumRows,\n        color,\n        firstGradientColor,\n        secondGradientColor,\n        fontColor,\n        setColor,\n        setFontColor,\n        setFirstGradientColor,\n        setSecondGradientColor,\n        boxMargin,\n        setBoxMargin,\n        displayTitles,\n        setDisplayTitles,\n        fontFamily,\n        setFontFamily,\n        sort,\n        setSort,\n        randomList,\n        generateRandomCollage,\n        generateRandomAnimeCollage,\n        generateRandomMovieCollage,\n        generateRandomTvCollage,\n        generateRandomGameCollage,\n        shuffled,\n        setShuffled,\n        clear,\n        setClear,\n        closeSearch,\n        searchMode,\n        setSearchMode,\n        boxType,\n        setBoxType,\n        backgroundMode,\n        setBackgroundMode,\n        borderRadius,\n        setBorderRadius,\n        gradientAngle,\n        setGradientAngle,\n      }}\n    >\n      {props.children}\n    </CollageContext.Provider>\n  );\n};\n\nexport { CollageContextProvider, CollageContext };\n","import React, { useContext } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport \"../styles/options.css\";\n\nconst Options = () => {\n  // Functional Options component\n  // Allows for collage/grid customization\n\n  // React Context for the customization options\n  const {\n    numRows,\n    numCols,\n    setNumRows,\n    setNumCols,\n    color,\n    firstGradientColor,\n    secondGradientColor,\n    setFirstGradientColor,\n    setSecondGradientColor,\n    fontColor,\n    setColor,\n    setFontColor,\n    boxMargin,\n    setBoxMargin,\n    setDisplayTitles,\n    displayTitle,\n    fontFamily,\n    setFontFamily,\n    sort,\n    setSort,\n    generateRandomCollage,\n    generateRandomAnimeCollage,\n    generateRandomMovieCollage,\n    generateRandomTvCollage,\n    generateRandomGameCollage,\n    setShuffled,\n    setClear,\n    searchMode,\n    setSearchMode,\n    boxType,\n    setBoxType,\n    backgroundMode,\n    setBackgroundMode,\n    borderRadius,\n    setBorderRadius,\n    gradientAngle,\n    setGradientAngle,\n  } = useContext(CollageContext);\n\n  // Generate random collage based on the selected mode\n  let generateRandom;\n  switch (searchMode) {\n    case \"music\":\n      generateRandom = generateRandomCollage;\n      break;\n    case \"movies\":\n      generateRandom = generateRandomMovieCollage;\n      break;\n    case \"anime\":\n      generateRandom = generateRandomAnimeCollage;\n      break;\n    case \"tv\":\n      generateRandom = generateRandomTvCollage;\n      break;\n    case \"videogames\":\n      generateRandom = generateRandomGameCollage;\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <div className=\"options-container\">\n      <div className=\"options\">\n        {/* Number of rows slider */}\n        <label>\n          Rows:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            name=\"numRows\"\n            value={numRows}\n            onChange={(event) => setNumRows(event.target.value * 1)}\n          />{\" \"}\n          {numRows}\n        </label>\n        <br />\n        <br />\n        {/* Number of columns slider */}\n        <label>\n          Columns:\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            step=\"1\"\n            value={numCols}\n            onChange={(event) => setNumCols(event.target.value * 1)}\n          />\n          {numCols}\n        </label>\n        <br />\n        <br />\n        {/* Margin slider (number of pixels) */}\n        <label>\n          Margin (pixels):\n          <input\n            type=\"range\"\n            name=\"boxMargin\"\n            min=\"0\"\n            max=\"15\"\n            step=\"1\"\n            value={boxMargin}\n            onChange={(event) => setBoxMargin(Number(event.target.value))}\n          />\n          {boxMargin}\n        </label>\n        <br />\n        <br />\n        <label>\n          {/* Border radius slider */}\n          Border Radius:\n          <input\n            type=\"range\"\n            name=\"borderRadius\"\n            min=\"0\"\n            max=\"50\"\n            step=\"1\"\n            value={borderRadius}\n            onChange={(event) => setBorderRadius(event.target.value * 1)}\n          />\n        </label>\n        <br />\n        <br />\n        {/* Radio button to select grid cell's shape (square) */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"boxType\"\n            value=\"square\"\n            checked={boxType === \"square\"}\n            onChange={(event) => setBoxType(event.target.value)}\n          />\n          Square\n        </label>\n        <br />\n        {/* Radio button for grid cell's shape (rectangle) */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"boxType\"\n            value=\"rectangle\"\n            checked={boxType === \"rectangle\"}\n            onChange={(event) => setBoxType(event.target.value)}\n          />\n          Rectangle\n        </label>\n        <br />\n        <br />\n        {/* Select input for search mode. What kind of media to look for. */}\n        <select\n          name=\"searchMode\"\n          onChange={(event) => setSearchMode(event.target.value)}\n        >\n          <option value=\"music\">Music</option>\n          <option value=\"movies\">Movies</option>\n          <option value=\"tv\">TV Shows</option>\n          <option value=\"anime\">Anime</option>\n          <option value=\"videogames\">Video Games</option>\n        </select>\n        <br />\n        <br />\n        {/* Radio button for regular background color */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"backgroundMode\"\n            value=\"regular\"\n            checked={backgroundMode === \"regular\"}\n            onChange={(event) => setBackgroundMode(event.target.value)}\n          />\n          Regular\n        </label>\n        <br />\n        {/* Radio button for gradient background color */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"backgroundMode\"\n            value=\"gradient\"\n            checked={backgroundMode === \"gradient\"}\n            onChange={(event) => setBackgroundMode(event.target.value)}\n          />\n          Gradient\n        </label>\n        <br />\n        <br />\n        {/* Color options based on selected color mode */}\n        {backgroundMode === \"regular\" ? (\n          <label>\n            <span>Background Color: </span>\n            <input\n              type=\"text\"\n              name=\"color\"\n              value={color}\n              onChange={(event) => setColor(event.target.value)}\n            />\n          </label>\n        ) : (\n          <div>\n            <label>\n              <span>Linear Gradient: </span>\n              <div>\n                <input\n                  type=\"text\"\n                  name=\"colorOne\"\n                  value={firstGradientColor}\n                  onChange={(event) =>\n                    setFirstGradientColor(event.target.value)\n                  }\n                />\n                <input\n                  type=\"text\"\n                  name=\"colorTwo\"\n                  value={secondGradientColor}\n                  onChange={(event) =>\n                    setSecondGradientColor(event.target.value)\n                  }\n                />\n              </div>\n            </label>\n            <label>\n              Angle:\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={gradientAngle}\n                onChange={(event) => setGradientAngle(event.target.value * 1)}\n              />\n            </label>\n          </div>\n        )}\n        <br />\n        <br />\n        {/* Select font family*/}\n        <label>\n          <span>Font: </span>\n          <select\n            value={fontFamily}\n            onChange={(event) => setFontFamily(event.target.value)}\n          >\n            <option value=\"Courier\">Courier</option>\n            <option value=\"Helvetica\">Helvetica</option>\n            <option value=\"Verdana\">Verdana</option>\n            <option value=\"Roboto\">Roboto</option>\n          </select>\n        </label>\n        <br />\n        {/* Select font color */}\n        <label>\n          <span>Font Color: </span>\n          <input\n            type=\"text\"\n            name=\"fontColor\"\n            value={fontColor}\n            onChange={(event) => setFontColor(event.target.value)}\n          />\n        </label>\n        <br />\n        <br />\n        {/* Radio button for drag and sort option */}\n        {/* Pushes neighboring cells to the side */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            value={sort}\n            checked={sort}\n            onChange={() => setSort(true)}\n          />\n          Drag and Sort\n        </label>\n        <br />\n        {/* Radio button for drag and swap option */}\n        {/* Swaps grid cell positions */}\n        <label>\n          <input\n            type=\"radio\"\n            name=\"sort\"\n            value={sort}\n            checked={!sort}\n            onChange={() => setSort(false)}\n          />\n          Drag and Swap\n        </label>\n        <br />\n        <br />\n        {/* Checkbox to show or hide titles */}\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"displayTitle\"\n            value={displayTitle}\n            checked={displayTitle}\n            onChange={() => setDisplayTitles((prev) => !prev)}\n          />\n          Show Titles\n        </label>\n        <br />\n        <br />\n        <br />\n        {/* Button that generates a random media collage */}\n        <button\n          onClick={() => generateRandom(numRows, numCols)}\n          className=\"menu-button\"\n        >\n          Generate Random\n        </button>\n        <br />\n        <br />\n        {/* Button that shuffles the images */}\n        <button\n          onClick={() => setShuffled((prev) => prev + 1)}\n          className=\"menu-button\"\n        >\n          Shuffle Images\n        </button>\n        <br />\n        <br />\n        {/* Button that clears the collage */}\n        <button\n          onClick={() => setClear((prev) => !prev)}\n          className=\"menu-button\"\n        >\n          Clear Collage\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Options;\n","// Type object required for the DnD library\nexport default {\n  BOX: \"box\",\n};\n","import React, { useRef } from \"react\";\nimport { useDrop, useDrag } from \"react-dnd\";\nimport ItemTypes from \"./ItemTypes\";\nimport \"../styles/box.css\";\n\nconst Box = ({\n  id,\n  index,\n  moveBox,\n  image,\n  boxMargin,\n  handleClick,\n  numCols,\n  boxType,\n  borderRadius,\n}) => {\n  const ref = useRef(null);\n\n  const [, drop] = useDrop({\n    /* \n      The useDrop hook provides a way to wire in the component into the DnD \n      system as a drop target \n    */\n    // The \"type\" to accept as a droppable object\n    accept: ItemTypes.BOX,\n    drop(item) {\n      // Function that is called when a compatible item is dropped on target\n\n      // If box ref is null exit the function\n      if (!ref.current) {\n        return;\n      }\n\n      // Don't replace items with themselves\n      // Exit if dragged box is hovering over its own index\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      moveBox(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    },\n  });\n\n  const [, drag] = useDrag({\n    /*\n      useDrag hook provides a way to wire in the component into the DnD\n      system as a drag source\n    */\n\n    // type: used by the \"accept specification\" of drop targets\n    item: { type: ItemTypes.BOX, id, index },\n  });\n\n  drag(drop(ref));\n\n  // Box dimensions\n  // Decrease box size as the number of columns increases\n  // So that the grids fits the screen size\n  let dims;\n  if (numCols <= 5) {\n    dims = 160;\n  } else if (numCols === 6) {\n    dims = 140;\n  } else if (numCols === 7) {\n    dims = 130;\n  } else if (numCols === 8) {\n    dims = 110;\n  } else if (numCols === 9) {\n    dims = 100;\n  } else if (numCols === 10) {\n    dims = 90;\n  }\n\n  // Box style\n  const style = {\n    // Box height based on dimensions\n    height: boxType === \"square\" ? dims + \"px\" : dims / 0.7 + \"px\",\n    width: dims + \"px\",\n    backgroundColor: \"lightgrey\",\n    margin: boxMargin,\n    border: \"none\",\n  };\n  return (\n    <div\n      className=\"box\"\n      style={{\n        ...style,\n        backgroundImage: `url(${image})`,\n        backgroundSize: `${dims}px ${\n          boxType === \"square\" ? dims : dims / 0.7\n        }px`,\n        borderRadius: `${borderRadius}%`,\n      }}\n      ref={ref}\n      onClick={() => handleClick(id)}\n    ></div>\n  );\n};\nexport default Box;\n","import React, { useContext } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport \"../styles/cover.css\";\n\nconst Cover = ({ image, artist, name, setBoxes }) => {\n  // Functional cover component\n  // This component is used in the SearchmMedia modal component\n  // Showed as a search result and contains info such as artist/title\n\n  // const { selectedId, setBoxes, closeSearch } = useContext(CollageContext);\n  const { selectedId, closeSearch, searchMode } = useContext(CollageContext);\n\n  const handleClick = () => {\n    setBoxes((prevBoxes) => {\n      const modified = prevBoxes.map((box) => {\n        let mediaName = searchMode === \"music\" ? `${artist} - ${name}` : name;\n        if (box.id === selectedId) {\n          return {\n            ...box,\n            image,\n            data: mediaName,\n          };\n        }\n        return box;\n      });\n      return modified;\n    });\n    closeSearch();\n  };\n\n  return (\n    <div>\n      <img\n        className=\"search-cover\"\n        src={image}\n        alt={`${artist} - ${name}`}\n        onClick={handleClick}\n      />\n    </div>\n  );\n};\n\nexport default Cover;\n","import React from \"react\";\n\nfunction createBoxes(rows, cols) {\n  // Function that creates box objects\n  const items = rows * cols;\n  const itemArray = [];\n  for (let i = 0; i < items; i++) {\n    itemArray.push({ id: i, text: i + 1, image: \"\", data: \"\" });\n  }\n  return itemArray;\n}\n\nfunction resizeMatrix(rows, cols, boxes) {\n  // Id of the last box in the collage / grid\n  const lastId = boxes.length - 1;\n  // Number of boxes in the collage / grid\n  const numberOfItems = rows * cols;\n  if (numberOfItems > boxes.length) {\n    // If (rows * columns) > boxes array length\n    // Add new box objects\n    const newItems = [];\n    for (let i = lastId + 1; i < numberOfItems; i++) {\n      newItems.push({ id: i, text: i + 1, image: \"\", data: \"\" });\n    }\n    const modifiedData = [...boxes, ...newItems];\n    return modifiedData;\n  }\n  if (numberOfItems < boxes.length) {\n    // If (rows * columns) < boxes array length\n    // Remove extra box objects\n    return boxes.slice(0, numberOfItems);\n  }\n}\n\nfunction shuffle(array) {\n  // Function that is used to shuffle the collage\n  const shuffledArr = [].concat(array);\n  for (let i = shuffledArr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const x = shuffledArr[i];\n    shuffledArr[i] = shuffledArr[j];\n    shuffledArr[j] = x;\n  }\n  return shuffledArr;\n}\n\nfunction replaceSpaces(string) {\n  // Function that replaces spaces in search queries with \"+\"\n  // Can't have space characters in API queries\n  return string.split(\" \").join(\"+\");\n}\n\nfunction fillMissingData(array, numberOfItems) {\n  // Function that is used to fill up empty boxes with duplicate data\n  // It loops while there are still empty boxes\n  while (array.length < numberOfItems && array.length > 0) {\n    const difference = numberOfItems - array.length;\n    // If the difference is higher than 20\n    // Duplicate the whole array\n    if (difference > 20) {\n      array.push(...array);\n      // Just add the difference if difference < 20\n    } else {\n      array.push(...array.slice(0, difference));\n    }\n  }\n  return array;\n}\n\nconst createMatrix = (data, numRows, numCols) => {\n  const matrix = [];\n  let start = 0;\n  // Number of columns in the matrix\n  let end = numCols;\n  for (let i = 0; i < numRows; i++) {\n    matrix.push(data.slice(start, end));\n    start += numCols;\n    end += numCols;\n  }\n  return matrix;\n};\n\nconst createMatrixTable = (data, numRows, numCols) => {\n  const matrix = createMatrix(data, numRows, numCols);\n  const body = matrix.map((row, rowIndex) => {\n    return (\n      <tr key={rowIndex}>\n        {row.map((column, colIndex) => {\n          return <td key={colIndex}>{column}</td>;\n        })}\n      </tr>\n    );\n  });\n  return body;\n};\n\n// const getRandomLetter = () => {\n//   const letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n//   const randomLetter = letters[Math.floor(Math.random() * letters.length)];\n//   return randomLetter;\n// };\n\n// const getRandomYearOrGenre = () => {\n//   const genresAndYears = [\n//     \"pop\",\n//     \"rap\",\n//     \"rock\",\n//     \"disco\",\n//     \"electronic\",\n//     \"80s\",\n//     \"90s\",\n//     \"2000s\",\n//     \"2008\",\n//     \"2009\",\n//     \"2010s\",\n//     \"2010\",\n//     \"2011\",\n//     \"2012\",\n//     \"2013\",\n//     \"2014\",\n//     \"2015\",\n//     \"2016\",\n//     \"2017\",\n//     \"2019\",\n//     \"2020\",\n//     \"2021\",\n//     \"2022\",\n//   ];\n//   const randomGenreOrYear =\n//     genresAndYears[Math.floor(Math.random() * genresAndYears.length)];\n//   return randomGenreOrYear;\n// };\n\n// const fetchMusicData = async (query, API, numItems, byAlbum) => {\n//   const albumLetterQuery =\n//     `http://ws.audioscrobbler.com/2.0/?method=album.search` +\n//     `&album=${query}&api_key=${API}&format=json&limit=${numItems}`;\n\n//   const genreYearQuery =\n//     `http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums` +\n//     `&tag=${query}&api_key=${API}&format=json&limit=${numItems}`;\n\n//   const response = await fetch(byAlbum ? albumLetterQuery : genreYearQuery);\n//   const data = await response.json();\n//   const albumData = byAlbum\n//     ? data.results.albummatches.album\n//     : data.albums.album;\n\n//   const albumObjects = albumData.map((item) => ({\n//     image: item.image[2][\"#text\"],\n//     data: `${byAlbum ? item.artist : item.artist.name} - ${item.name}`,\n//   }));\n//   return albumObjects;\n// };\n\n// const getRandomAnimeType = () => {\n//   const animeType = [\"movie\", \"tv\"];\n//   const randomType = animeType[Math.floor(Math.random() * animeType.length)];\n//   return randomType;\n// };\n\n// const getRandomAnimeGenre = () => {\n//   const genreIds = [\n//     1,\n//     2,\n//     3,\n//     4,\n//     6,\n//     7,\n//     10,\n//     11,\n//     14,\n//     16,\n//     17,\n//     18,\n//     19,\n//     20,\n//     21,\n//     23,\n//     27,\n//     29,\n//     30,\n//     31,\n//     32,\n//     36,\n//     37,\n//     38,\n//     39,\n//     40,\n//     41,\n//     42,\n//   ];\n//   const randomGenreId = genreIds[Math.floor(Math.random() * genreIds.length)];\n//   return randomGenreId;\n// };\n\nexport {\n  createBoxes,\n  resizeMatrix,\n  shuffle,\n  replaceSpaces,\n  fillMissingData,\n  createMatrix,\n  createMatrixTable,\n  // getRandomLetter,\n  // getRandomYearOrGenre,\n  // fetchMusicData,\n  // getRandomAnimeGenre,\n  // getRandomAnimeType,\n};\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport Modal from \"react-modal\";\nimport Cover from \"./Cover\";\nimport { replaceSpaces } from \"../utils\";\nimport \"../styles/searchMedia.css\";\n\nconst SearchMedia = ({ setBoxes }) => {\n  // A functional modal component that lets the user search for media images\n\n  // Component state\n  // Controlled search input value\n  const [search, setSearch] = useState(\"\");\n\n  // Array of media image objects that are presented on the search modal\n  // for the user to select the image to add it to the collage\n  const [searchData, setSearchData] = useState([]);\n\n  const { displaySearch, closeSearch, searchMode } = useContext(CollageContext);\n\n  useEffect(() => {\n    if (!displaySearch) {\n      setSearchData([]);\n      setSearch(\"\");\n    }\n  }, [displaySearch]);\n\n  // Build a different query for a different search mode\n  let query;\n  switch (searchMode) {\n    case \"music\":\n      query = `http://localhost:5000/api/music?query=${replaceSpaces(search)}`;\n      break;\n    case \"movies\":\n      query = `http://localhost:5000/api/movies?query=${replaceSpaces(search)}`;\n      break;\n    case \"tv\":\n      query = `http://localhost:5000/api/tv?query=${replaceSpaces(search)}`;\n      break;\n    case \"anime\":\n      query = `http://localhost:5000/api/anime?query=${replaceSpaces(search)}`;\n      break;\n    case \"videogames\":\n      query = `http://localhost:5000/api/games?query=${replaceSpaces(search)}`;\n      break;\n    default:\n  }\n\n  const getData = async () => {\n    try {\n      const response = await fetch(query);\n      if (!response.ok) {\n        throw new Error(\"404: Media not found\");\n      }\n      const data = await response.json();\n      setSearchData(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    // Function that submits user's query with Enter/Return key\n    if (event.keyCode === 13) {\n      getData();\n    }\n  };\n\n  // Create coverComponents that are presented on the search modal\n  const coverComponents = searchData.map((item, index) => {\n    // Different API data is differently structured\n    let image, artist, name;\n    switch (searchMode) {\n      case \"music\":\n        image = item.image[2][\"#text\"];\n        artist = item.artist;\n        name = item.name;\n        break;\n      case \"movies\":\n        image = `https://image.tmdb.org/t/p/w300${item.poster_path}`;\n        name = item.title;\n        break;\n      case \"tv\":\n        image = `https://image.tmdb.org/t/p/w300${item.poster_path}`;\n        name = item.name;\n        break;\n      case \"anime\":\n        image = item.image_url;\n        name = item.title;\n        break;\n      case \"videogames\":\n        image = item.background_image;\n        name = item.name;\n        break;\n      default:\n    }\n    return (\n      <Cover\n        image={image}\n        name={name}\n        artist={artist}\n        key={index + name}\n        setBoxes={setBoxes}\n      />\n    );\n  });\n\n  // Placeholder for the search input and modal header\n  // Lets the user know what to search\n  let searchItem;\n  let searchPlaceholder;\n  switch (searchMode) {\n    case \"music\":\n      searchItem = \"an album\";\n      searchPlaceholder = \"Artist/album name\";\n      break;\n    case \"movies\":\n      searchItem = \"a movie\";\n      searchPlaceholder = \"Movie title\";\n      break;\n    case \"videogames\":\n      searchItem = \"a video game\";\n      searchPlaceholder = \"Video game title\";\n      break;\n    case \"tv\":\n      searchItem = \"a TV show\";\n      searchPlaceholder = \"TV show title\";\n      break;\n    case \"anime\":\n      searchItem = \"an anime\";\n      searchPlaceholder = \"Anime title\";\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Modal\n      isOpen={displaySearch}\n      className=\"modal\"\n      onRequestClose={closeSearch}\n      ariaHideApp={false}\n    >\n      <div className=\"search-box\">\n        <div className=\"search-header\">\n          <h2>\n            <span role=\"img\" aria-label=\"search icon\">\n              &#128269;\n            </span>{\" \"}\n            Search for {searchItem}\n          </h2>\n          <button className=\"close\" onClick={closeSearch}>\n            X\n          </button>\n        </div>\n        <div className=\"searchbar\">\n          <input\n            type=\"search\"\n            name=\"search\"\n            value={search}\n            placeholder={searchPlaceholder}\n            onKeyDown={handleKeyDown}\n            onChange={(event) => setSearch(event.target.value)}\n          />\n          <div className=\"search-results\">{coverComponents}</div>\n        </div>\n        <div className=\"search-button\">\n          <button onClick={getData}>Search</button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default SearchMedia;\n","import React from \"react\";\n\nconst TitlesContainer = ({\n  titles,\n  numRows,\n  numCols,\n  fontFamily,\n  fontColor,\n  width,\n}) => {\n  // Functional component that holds the media titles\n\n  // Separate the titles into separate groups based on rows / columns\n  // Each title group will be separated by a space\n  const subArrays = [];\n  let start = 0;\n  let end = numCols;\n  for (let i = 0; i < numRows; i++) {\n    subArrays.push([...titles.slice(start, end), <br />]);\n    start += numCols;\n    end += numCols;\n  }\n  // Create list <li> elements\n  const titleArray = subArrays.flat();\n  const listItems = titleArray.map((title, index) => {\n    if (title !== <br />) {\n      title = <li key={index}>{title}</li>;\n    }\n    return title;\n  });\n\n  return (\n    <ul\n      style={{\n        listStyle: \"none\",\n        fontFamily,\n        color: fontColor,\n        width: \"100%\",\n        overflow: \"auto\",\n        // reduce font size with increasing width\n        fontSize: `${800 / width}rem`,\n        whiteSpace: \"nowrap\",\n        padding: \"0 4%\",\n      }}\n    >\n      {listItems}\n    </ul>\n  );\n};\n\nexport default TitlesContainer;\n","import React, {\n  useState,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n} from \"react\";\nimport update from \"immutability-helper\";\nimport Box from \"./Box\";\nimport SearchMedia from \"./SearchMedia\";\nimport TitlesContainer from \"./TitlesContainer\";\nimport { CollageContext } from \"../Context/CollageContext\";\nimport {\n  resizeMatrix,\n  createBoxes,\n  shuffle,\n  createMatrixTable,\n} from \"../utils\";\nimport \"../styles/container.css\";\n\nconst Container = () => {\n  // Functional Container component\n\n  const {\n    getId,\n    numRows,\n    numCols,\n    color,\n    firstGradientColor,\n    secondGradientColor,\n    fontColor,\n    boxMargin,\n    displayTitles,\n    fontFamily,\n    sort,\n    randomList,\n    shuffled,\n    clear,\n    searchMode,\n    backgroundMode,\n    boxType,\n    borderRadius,\n    gradientAngle,\n  } = useContext(CollageContext);\n\n  const [boxes, setBoxes] = useState(createBoxes(numRows, numCols));\n\n  // An array of media titles (strings)\n  const [titles, setTitles] = useState([]);\n  //\n  const [width, setWidth] = useState(null);\n  const widthRef = useRef(null);\n\n  const moveBox = useCallback(\n    (dragIndex, hoverIndex) => {\n      /* \n        Uses useCallback hook so that the function is not recreated every\n        time the component renders \n        Only when the 'boxes' and 'sort' values change \n      */\n\n      // Selected box that is being dragged\n      const dragBox = boxes[dragIndex];\n      // Position / index of the box that is being hovered on\n      const hoveredBox = boxes[hoverIndex];\n      if (sort) {\n        // Push the neighboring boxes to the side if \"sort\" is selected\n        setBoxes((prev) =>\n          update(prev, {\n            // Remove from dragIndex and add to hoverIndex without removing box\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragBox],\n            ],\n          })\n        );\n      } else {\n        // Swap the drag box with drop box if \"swap\" is selected\n\n        setBoxes((prev) =>\n          update(prev, {\n            $splice: [\n              [dragIndex, 1, hoveredBox],\n              [hoverIndex, 1, dragBox],\n            ],\n          })\n        );\n      }\n    },\n    [boxes, sort]\n  );\n\n  // Make sure it doesn't run on the first render\n  const initialRenderResizeRef = useRef(true);\n  useEffect(() => {\n    if (initialRenderResizeRef.current) {\n      initialRenderResizeRef.current = false;\n    } else {\n      // Resize the grid by adding / removing boxes based on # rows/columns\n      setBoxes((prevBox) => resizeMatrix(numRows, numCols, prevBox));\n    }\n  }, [numRows, numCols]);\n\n  useEffect(() => {\n    // Generate a random collage from the values in the randomList\n    // randomList array is populated with media objects when user\n    // chooses to generate a random collage\n    setBoxes((prevBox) => {\n      //  Get the artwork image\n      const images = randomList.map((item) => item.image);\n      //  Get the media data\n      const data = randomList.map((item) => item.data);\n      const randomCollage = prevBox.map((item, index) => {\n        return {\n          ...item,\n          image: images[index],\n          data: data[index],\n        };\n      });\n      return randomCollage;\n    });\n  }, [randomList]);\n\n  useEffect(() => {\n    // Populate the title state array with media titles\n    let albumData = boxes.map((item) => item.data);\n    setTitles(albumData);\n  }, [boxes]);\n\n  const initialRenderShuffleRef = useRef(true);\n  useEffect(() => {\n    // Don't shuffle on initial render\n    if (initialRenderShuffleRef.current) {\n      initialRenderShuffleRef.current = false;\n    } else {\n      setBoxes((prevBox) => shuffle(prevBox));\n    }\n  }, [shuffled]);\n\n  useEffect(() => {\n    // Clear collage is user chooses the \"Clear Collage\" option\n    setBoxes((prevBox) => {\n      const modified = prevBox.map((item) => {\n        return {\n          ...item,\n          image: \"\",\n          data: \"\",\n        };\n      });\n      return modified;\n    });\n  }, [clear]);\n\n  useEffect(() => {\n    // Check the grid width based on the number of columns\n    // Necessary to choose a proper font size for media titles\n    if (displayTitles) {\n      setWidth(widthRef.current.getBoundingClientRect().width);\n    }\n  }, [numCols, displayTitles]);\n\n  // Create collage box components\n  const boxComponents = boxes.map((box, index) => {\n    return (\n      <Box\n        index={index}\n        key={box.id}\n        id={box.id}\n        text={box.text}\n        image={box.image}\n        moveBox={moveBox}\n        handleClick={getId}\n        boxMargin={boxMargin}\n        numCols={numCols}\n        boxType={boxType}\n        borderRadius={borderRadius}\n      />\n    );\n  });\n\n  // Create a table body\n  const body = createMatrixTable(boxComponents, numRows, numCols);\n\n  // Choose background style: regular or linear gradient\n  const backgroundStyle =\n    backgroundMode === \"regular\"\n      ? { backgroundColor: color }\n      : {\n          background: `linear-gradient(${gradientAngle}deg, ${firstGradientColor}, ${secondGradientColor})`,\n        };\n\n  return (\n    <div className=\"container-wrapper\">\n      <SearchMedia setBoxes={setBoxes} />\n      <div className=\"collage\">\n        <table ref={widthRef} style={backgroundStyle}>\n          <tbody>{body}</tbody>\n          <tfoot>\n            <tr>\n              <td>\n                {displayTitles ? (\n                  <TitlesContainer\n                    titles={titles}\n                    numCols={numCols}\n                    numRows={numRows}\n                    fontFamily={fontFamily}\n                    fontColor={fontColor}\n                    width={width}\n                    searchMode={searchMode}\n                  />\n                ) : null}\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\nimport Options from \"./Components/Options\";\nimport Container from \"./Components/Container\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport \"./styles/app.css\";\n\nfunction App() {\n  return (\n    <DndProvider backend={Backend}>\n      <div className=\"app-container\">\n        <Options />\n        <Container />\n      </div>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {CollageContextProvider} from './Context/CollageContext';\nimport './styles/index.css';\n\nReactDOM.render(\n  <CollageContextProvider>\n    <App />\n  </CollageContextProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}